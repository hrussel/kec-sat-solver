HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

                KECOSATS (Kelwin-Eleazar-Carlos Optimized SAT Solver)
		    Instructions for solving SUDOKU instances

HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

Authors:
 Carlos Colmenares
 Eleazar Leal
 Kelwin Fernandez

Universidad Simón Bolívar. 
Caracas, Venezuela.

HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

% This file is an extension of the README file located in the root directory,
% it describes how to  solve sudoku instances using KECOSATS

README FILE
-----------
SUMMARY:

(I)     Additional software requirements
(II)    Compiling
(III)   Solving sudoku instances
(IV)    Test cases' format

HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

--------------------------------------------------------------------------------
(I) Additional software requirements
--------------------------------------------------------------------------------

In adition to the standard technical requirement of the KECOSATS, for solving
sudoku instances the next software is needed:

    (a) perl v5.8.8 (or later)
    (b) pdfTeX 3.141592-1.40.3-2.2 (Web2C 7.5.6) 

--------------------------------------------------------------------------------
(II) Compiling KECOSATS sudoku solver
--------------------------------------------------------------------------------

For compiling just execute the "sudoku" target of the Makefile:

0.- On the root directory of the KECOSATS, run the makefile with the
    'sudoku rule'.
    E.G.:

    > cd /opt/kecosats
    > make sudoku

--------------------------------------------------------------------------------
(III) Solving Sudoku instances
--------------------------------------------------------------------------------

After compiling, for solving sudoku instances, just execute the 'sudoku'
executable in the root directory and pass the correct arguments

-f <input_file_sudoku>:  indicates the input file where to read the sudoku
                         instances to solve. For an explanation of the
                         format of this file, refer to the next section of this
                         README file.

-o <output_dimacs_cnf_formula>:  If this argument is provided, a 'DIMACS CNF'
                         representation of the last sudoku solved in the
                         input file is written in the file
                         "output_dimacs_cnf_formula". For further information
                         about dimacs, refer to the KECOSATS README file.

-e <output_pdf_file>     If this argument is provided, a pdf file named
                         output_pdf_file is generated with the puzzles
                         solved. If this argument is not provided, the initial
                         and solution puzzles are printed through stdout. 

-t <time>                When this argument is provided, a time limit of 'time'
                         seconds is given for finding the solution of any
                         sudoku.
   
For further information, give the flag -h to the executable.

These are some examples for executing the sudoku solver:

   > ./sudoku -f test/sudoku_test/3_sudokus.in
   > ./sudoku -f test/sudoku_test/60_sudokus.in -e solution.pdf -t 10

--------------------------------------------------------------------------------
(IV) Test cases' format
--------------------------------------------------------------------------------

- Every input file is comprised of several sudoku instances, each one on a
  single line.
- Each sudoku test case is comprised of a 81-character string, each
  character in the range [0,9].
- Each character represents a number in a cell of the puzzle, 0 means no
  number is on the cell.
- The first 9 characters correspond to the first row of the sudoku, from left
  to right, the next 9 characters belong to the second row and so on
  => The ith character of the string is the number that belongs to the
     (i mod 9)th column and (floor (i / 9))th row of the sudoku.

Some sudoku test cases examples can be found in the directory 'test/sudoku_test'
